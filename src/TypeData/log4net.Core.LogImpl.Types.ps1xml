<?xml version="1.0" encoding="utf-8" ?>
<Types>
  <Type> 
     <Name>log4net.Core.LogImpl</Name> 
     <Members> 
       <ScriptMethod> 
         <!-- Insére au début du message à logger le nom du module courant.
              Chaque module utilisant Log4Posh déclare une variable privée $lg4n_ModuleName,
              le module Log4Posh déclare une variable privée LogJobName. 
              Celle-ci est ajoutée dans [log4net.GlobalContext]::Properties["LogJobName"]
              
              Chaque script utilisant Log4Posh déclare une variable $lg4n_ScriptName.

              Insert the name of the current module at the beginning of the message to be logged.
              Each module using Log4Posh declares a private variable $ lg4n_ModuleName,
              The Log4Posh module declares a private variable LogJobName
              This is added in [log4net.GlobalContext]::Properties ["LogJobName"]

              Each script using Log4Posh declares a variable $ lg4n_ScriptName,
             
              Overload :
               PSDebug(Object) : Converts the message object (passed as parameter) to a string by invoking the appropriate IObjectRenderer.
               PSDebug(Object,Exception) :Logs a message object with the DEBUG level including the stack trace of the Exceptionexception passed as a parameter. 
          -->
         <Name>PSDebug</Name> 
         <Script>
            if ($this.IsDebugEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
             		 1 { $this.Psbase.Debug("[$Name] $($args[0])") }
                 2 { $this.Psbase.Debug("[$Name] $($args[0])",$args[1]) }
  	             default { throw "The method Debug do not contains override with $($args.Count) parameters." }
              }
             }
         </Script> 
       </ScriptMethod> 
       <ScriptMethod>
         <Name>PSDebugFormat</Name>
         <Script>
            if ($this.IsDebugEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
                 1 { $this.Psbase.DebugFormat("[$Name] $($args[0])") }
                 2 { $this.Psbase.DebugFormat("[$Name] $($args[0])",$args[1]) }
                 3 {
                     if ( $args[0] -is [System.IFormatProvider])
                     { $this.Psbase.DebugFormat($args[0],"[$Name] $($args[1])",$args[2]) }
                     else
                     { $this.Psbase.DebugFormat("[$Name] $($args[0])",$args[1],$args[2]) } 
                    }
                 4 { $this.Psbase.DebugFormat("[$Name] $($args[0])",$args[1],$args[2],$args[3]) }
                 default { throw "The method DebugFormat do not contains override with $($args.Count) parameters." }
              }
             }
         </Script>
       </ScriptMethod>       
       
       <ScriptMethod> 
         <Name>PSInfo</Name> 
         <Script>
            if ($this.IsInfoEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
             		 1 { $this.Psbase.Info("[$Name] $($args[0])") }
                 2 { $this.Psbase.Info("[$Name] $($args[0])",$args[1]) }
  	             default { throw "The method Info do not contains override with $($args.Count) parameters." }
              }
             }
         </Script> 
       </ScriptMethod> 
       <ScriptMethod>
         <Name>PSInfoFormat</Name>
         <Script>
            if ($this.IsInfoEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
                 1 { $this.Psbase.InfoFormat("[$Name] $($args[0])") }
                 2 { $this.Psbase.InfoFormat("[$Name] $($args[0])",$args[1]) }
                 3 {
                     if ( $args[0] -is [System.IFormatProvider])
                     { $this.Psbase.InfoFormat($args[0],"[$Name] $($args[1])",$args[2]) }
                     else
                     { $this.Psbase.InfoFormat("[$Name] $($args[0])",$args[1],$args[2]) } 
                    }
                 4 { $this.Psbase.InfoFormat("[$Name] $($args[0])",$args[1],$args[2],$args[3]) }
                 default { throw "The method InfoFormat do not contains override with $($args.Count) parameters." }
              }
            }
         </Script>
       </ScriptMethod>
              
       <ScriptMethod> 
         <Name>PSWarn</Name> 
         <Script>
            if ($this.IsWarnEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
             		 1 { $this.Psbase.Warn("[$Name] $($args[0])") }
                 2 { $this.Psbase.Warn("[$Name] $($args[0])",$args[1]) }
  	             default { throw "The method Warn do not contains override with $($args.Count) parameters." }
              }
             }
         </Script> 
       </ScriptMethod>  
       <ScriptMethod>
         <Name>PSWarnFormat</Name>
         <Script>
            if ($this.IsWarnEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
                 1 { $this.Psbase.WarnFormat("[$Name] $($args[0])") }
                 2 { $this.Psbase.WarnFormat("[$Name] $($args[0])",$args[1]) }
                 3 {
                     if ( $args[0] -is [System.IFormatProvider])
                     { $this.Psbase.WarnFormat($args[0],"[$Name] $($args[1])",$args[2]) }
                     else
                     { $this.Psbase.WarnFormat("[$Name] $($args[0])",$args[1],$args[2]) } 
                    }
                 4 { $this.Psbase.WarnFormat("[$Name] $($args[0])",$args[1],$args[2],$args[3]) }
                 default { throw "The method WarnFormat do not contains override with $($args.Count) parameters." }
              }
            }
         </Script>
       </ScriptMethod>
                    
       <ScriptMethod> 
         <Name>PSError</Name> 
         <Script>
            if ($this.IsErrorEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
             		 1 { $this.Psbase.Error("[$Name] $($args[0])") }
                 2 { $this.Psbase.Error("[$Name] $($args[0])",$args[1]) }
                 3 { $this.Psbase.Error("[$Name] $($args[0])",$args[1],$args[2]) }
  	             default { throw "The method Error do not contains override with $($args.Count) parameters." }
              }
             }
         </Script> 
       </ScriptMethod> 
       <ScriptMethod>
         <Name>PSErrorFormat</Name>
         <Script>
            if ($this.IsErrorEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
                 1 { $this.Psbase.ErrorFormat("[$Name] $($args[0])") }
                 2 { $this.Psbase.ErrorFormat("[$Name] $($args[0])",$args[1]) }
                 3 {
                     if ( $args[0] -is [System.IFormatProvider])
                     { $this.Psbase.ErrorFormat($args[0],"[$Name] $($args[1])",$args[2]) }
                     else
                     { $this.Psbase.ErrorFormat("[$Name] $($args[0])",$args[1],$args[2]) } 
                    }
                 4 { $this.Psbase.ErrorFormat("[$Name] $($args[0])",$args[1],$args[2],$args[3]) }
                 default { throw "The method ErrorFormat do not contains override with $($args.Count) parameters." }
              }
            }
         </Script>
       </ScriptMethod>
              
       <ScriptMethod> 
         <Name>PSFatal</Name> 
         <Script>
            if ($this.IsFatalEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
             		 1 { $this.Psbase.Fatal("[$Name] $($args[0])") }
                 2 { $this.Psbase.Fatal("[$Name] $($args[0])",$args[1]) }
  	             default { throw "The method Fatal do not contains override with $($args.Count) parameters." }
              }
             }
         </Script> 
       </ScriptMethod>  
       <ScriptMethod>
         <Name>PSFatalFormat</Name>
         <Script>
            if ($this.IsFatalEnabled)
            {  
              if (Test-Path Variable:lg4n_ModuleName)
              { $Name=$lg4n_ModuleName }
              elseif (Test-Path Variable:lg4n_ScriptName)
              { $Name=$lg4n_ScriptName }
              else
              { $Name="Console" }
              switch ($args.Count) {
                 1 { $this.Psbase.FatalFormat("[$Name] $($args[0])") }
                 2 { $this.Psbase.FatalFormat("[$Name] $($args[0])",$args[1]) }
                 3 {
                     if ( $args[0] -is [System.IFormatProvider])
                     { $this.Psbase.FatalFormat($args[0],"[$Name] $($args[1])",$args[2]) }
                     else
                     { $this.Psbase.FatalFormat("[$Name] $($args[0])",$args[1],$args[2]) } 
                    }
                 4 { $this.Psbase.FatalFormat("[$Name] $($args[0])",$args[1],$args[2],$args[3]) }
                 default { throw "The method FatalFormat do not contains override with $($args.Count) parameters." }
              }
            }
         </Script>
       </ScriptMethod>             
     </Members>        
  </Type>
</Types> 
